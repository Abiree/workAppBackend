// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231015175157_InitializationProject")]
    partial class InitializationProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("BreakTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("OverTime")
                        .HasColumnType("interval");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("statutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("statutId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e3258cb-a9ae-4859-b483-9e0fd7489e13"),
                            BreakTime = new TimeSpan(0, 1, 0, 0, 0),
                            Date = new DateTime(2023, 10, 15, 17, 51, 56, 715, DateTimeKind.Utc).AddTicks(2380),
                            InTime = new DateTime(2023, 10, 15, 8, 30, 0, 0, DateTimeKind.Utc),
                            OutTime = new DateTime(2023, 10, 15, 18, 30, 0, 0, DateTimeKind.Utc),
                            OverTime = new TimeSpan(0, 1, 0, 0, 0),
                            UserId = "1e2226cb-a0fd-4859-b483-9e0fd7489afb",
                            WorkTime = new TimeSpan(0, 9, 0, 0, 0),
                            statutId = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7489adb")
                        },
                        new
                        {
                            Id = new Guid("1e3258cb-a9ae-4859-b483-9e0fd7489adb"),
                            BreakTime = new TimeSpan(0, 1, 0, 0, 0),
                            Date = new DateTime(2023, 10, 15, 17, 51, 56, 715, DateTimeKind.Utc).AddTicks(2398),
                            InTime = new DateTime(2023, 10, 15, 8, 30, 0, 0, DateTimeKind.Utc),
                            OutTime = new DateTime(2023, 10, 15, 17, 30, 0, 0, DateTimeKind.Utc),
                            OverTime = new TimeSpan(0, 0, 0, 0, 0),
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb",
                            WorkTime = new TimeSpan(0, 8, 0, 0, 0),
                            statutId = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7489adb")
                        },
                        new
                        {
                            Id = new Guid("1e3258cb-a9ae-4859-b483-9e0fd7489e15"),
                            BreakTime = new TimeSpan(0, 1, 0, 0, 0),
                            Date = new DateTime(2023, 10, 15, 17, 51, 56, 715, DateTimeKind.Utc).AddTicks(2424),
                            InTime = new DateTime(2023, 10, 15, 8, 30, 0, 0, DateTimeKind.Utc),
                            OutTime = new DateTime(2023, 10, 15, 19, 30, 0, 0, DateTimeKind.Utc),
                            OverTime = new TimeSpan(0, 2, 0, 0, 0),
                            UserId = "1e8356cb-a0fd-3619-b483-9e0fd7489aaa",
                            WorkTime = new TimeSpan(0, 10, 0, 0, 0),
                            statutId = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7489adb")
                        });
                });

            modelBuilder.Entity("Entities.Entities.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            Name = "Software Engineer"
                        },
                        new
                        {
                            Id = new Guid("1e8356cb-a0fd-4859-b253-9e0fd7489adb"),
                            Name = "UI/UX designer"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Leaves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fromdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<Guid>("StatutId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Todate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StatutId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e8356cb-a0fd-4859-e780-9e0fd7489afb"),
                            Days = 3,
                            Desc = "Friend's Wedding Celebration",
                            Fromdate = new DateTime(2022, 11, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatutId = new Guid("1a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            Todate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            TypeId = new Guid("1e3258cb-a0fd-4859-b483-9e0fd7489adb"),
                            UserId = "1e8356cb-a0fd-4859-b483-9e0fd7489afb"
                        },
                        new
                        {
                            Id = new Guid("1e8356de-a0fd-4859-e780-9e0fd7489afb"),
                            Days = 5,
                            Desc = "Vacation",
                            Fromdate = new DateTime(2022, 11, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            StatutId = new Guid("1a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            Todate = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            TypeId = new Guid("1e3258cb-a0fd-4859-b483-9e0fd7489adb"),
                            UserId = "1e8356cb-a0fd-3619-b483-9e0fd7489aaa"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = new Guid("3a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Statut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Args")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7489adb"),
                            Args = "activity",
                            Name = "Present"
                        },
                        new
                        {
                            Id = new Guid("1e2549ea-a0fd-4859-b483-9e0fd7489adb"),
                            Args = "activity",
                            Name = "Absent"
                        },
                        new
                        {
                            Id = new Guid("1a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            Args = "leaves",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("1a5551ea-a0fd-4859-b483-9e0fd7489adb"),
                            Args = "leaves",
                            Name = "Approuved"
                        },
                        new
                        {
                            Id = new Guid("1a5553ea-a0fd-4859-b483-9e0fd7489adb"),
                            Args = "leaves",
                            Name = "Denied"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7422adb"),
                            Name = "Meeting"
                        },
                        new
                        {
                            Id = new Guid("1e2549ea-a0fd-4859-b483-9e0fd7433adb"),
                            Name = "UI Design"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a5680ea-a0fd-4859-b483-9e0fd7489adb"),
                            CreationDate = new DateTime(2023, 10, 15, 17, 51, 56, 715, DateTimeKind.Utc).AddTicks(4259),
                            Desc = "Description for Task 1",
                            EndTime = new DateTime(2023, 10, 11, 15, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Task 1",
                            ProjectId = new Guid("2a5550ea-a0fd-4859-b483-9e0fd7489adb"),
                            StartTime = new DateTime(2023, 10, 11, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Entities.Entities.TaskTag", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTag");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("2a5680ea-a0fd-4859-b483-9e0fd7489adb"),
                            TagId = new Guid("1e4729ea-a0fd-4859-b483-9e0fd7422adb")
                        },
                        new
                        {
                            TaskId = new Guid("2a5680ea-a0fd-4859-b483-9e0fd7489adb"),
                            TagId = new Guid("1e2549ea-a0fd-4859-b483-9e0fd7433adb")
                        });
                });

            modelBuilder.Entity("Entities.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            Name = "Team 1"
                        },
                        new
                        {
                            Id = new Guid("1e8356cb-a0fd-3256-b483-9e0fd7489adb"),
                            Name = "Team 2"
                        });
                });

            modelBuilder.Entity("Entities.Entities.TypeLeaves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeLeaves");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e3258cb-a0fd-4859-b483-9e0fd7489adb"),
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("Entities.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarImg")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DesignationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e2226cb-a0fd-4859-b483-9e0fd7489afb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96417191-ce08-4d7e-b1ed-fa1d5fe42072",
                            DateBirth = new DateTime(1999, 6, 3, 14, 30, 0, 0, DateTimeKind.Utc),
                            DesignationId = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            Email = "abireghallabii@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Abire",
                            LastName = "Ghallabi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABIREGHALLABII@GMAIL.COM",
                            NormalizedUserName = "ABIRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1WuOOekqvwr/zBdqO6+St4CEB6S6OyC7bhPljKuAVxydEwcYKlRCtF0CiT6Xwkcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff2b0bc4-aab5-4a41-87d1-98ddb3589751",
                            StartDay = new DateTime(2022, 9, 5, 8, 30, 0, 0, DateTimeKind.Utc),
                            TeamId = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            TwoFactorEnabled = false,
                            UserName = "abire"
                        },
                        new
                        {
                            Id = "1e8356cb-a0fd-4859-b483-9e0fd7489afb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "588086cc-04e6-4858-990e-b28b0222fa58",
                            DateBirth = new DateTime(1999, 3, 13, 14, 30, 0, 0, DateTimeKind.Utc),
                            DesignationId = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            Email = "henry@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Courtney",
                            LastName = "Henry",
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRY@GMAIL.COM",
                            NormalizedUserName = "HENRY",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyK8RWO42zsi2IrNOaweyiI1aQ04mVk/2XswpaV0UVabgwyXZQHSS+OMcbbwAjwfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7ab53f1-205d-470c-8882-6dfd7555d082",
                            StartDay = new DateTime(2022, 9, 15, 8, 30, 0, 0, DateTimeKind.Utc),
                            TeamId = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            TwoFactorEnabled = false,
                            UserName = "henry"
                        },
                        new
                        {
                            Id = "1e8356cb-a0fd-3619-b483-9e0fd7489aaa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b0dbdea-7dbe-4378-b5e4-1d4b6d6b2892",
                            DateBirth = new DateTime(1999, 1, 3, 14, 30, 0, 0, DateTimeKind.Utc),
                            DesignationId = new Guid("1e8356cb-a0fd-4859-b253-9e0fd7489adb"),
                            Email = "jenny@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jenny",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            ManagerId = "1e2226cb-a0fd-4859-b483-9e0fd7489afb",
                            NormalizedEmail = "JENNY@GMAIL.COM",
                            NormalizedUserName = "JENNY",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b2ce34a-2afe-47fd-9718-8893425a06f7",
                            StartDay = new DateTime(2022, 2, 5, 8, 30, 0, 0, DateTimeKind.Utc),
                            TeamId = new Guid("1e8356cb-a0fd-4859-b483-9e0fd7489adb"),
                            TwoFactorEnabled = false,
                            UserName = "jenny"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Activity", b =>
                {
                    b.HasOne("Entities.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("statutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statut");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entities.Leaves", b =>
                {
                    b.HasOne("Entities.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Entities.Entities.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.TypeLeaves", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Statut");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entities.Task", b =>
                {
                    b.HasOne("Entities.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.Entities.TaskTag", b =>
                {
                    b.HasOne("Entities.Entities.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Task", "Task")
                        .WithMany("TaskTags")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Entities.Entities.User", b =>
                {
                    b.HasOne("Entities.Entities.Designation", "Designation")
                        .WithMany("Users")
                        .HasForeignKey("DesignationId");

                    b.HasOne("Entities.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Entities.Entities.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");

                    b.Navigation("Designation");

                    b.Navigation("Manager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.Designation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Entities.Tag", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("Entities.Entities.Task", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("Entities.Entities.Team", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
